#!/usr/bin/env node

// Dependencies
var Blah = require("../lib")
  , Fs = require("fs")
  , Logger = require("bug-killer")
  , Clp = require("clp")
  , Package = require("../package")
  , Typpy = require("typpy")
  ;

// Parse the command line arguments
var readmeOpt = new Clp.Option(["r", "readme"], "Creates the README.md file.")
  , initOpt = new Clp.Option(["i", "init"], "Inits the .blah directory.")
  , gitignoreOpt = new Clp.Option(["g", "gitignore"], "Creates the .gitignore file.")
  , licenseOpt = new Clp.Option(["l", "license"], "Generates a LICENSE file with copyright information.", "license")
  , docsOpt = new Clp.Option(["d", "docs"], "Generates the markdown documentation (DOCUMENTATION.md) for input file.", "path")
  , contributingOpt = new Clp.Option(["c", "contributing"], "Generates the CONTRIBUTING.md.")
  , bumpOpt = new Clp.Option(["b", "bump-version"], "Bumps the package.json version.", "version", "minor")
  , parser = new Clp({
        name: "Blah"
      , description: Package.description
      , version: Package.version
      , exe: Package.name
      , examples: [
          , "$ blah --readme      # generates the README.md file using package.json"
          , "$ blah --gitignore   # generates the .gitignore file"
          , "$ blah --license mit # generates the LICENSE file taking copyright holder information"
          , "                     # from package.json or GIT variables"
          , "$ blah --docs index.js # generates DOCUMENTATION.md from index.js, parsing JSDoc comments"
          , "$ blah --bump-version major # bumps the major field of version, in package.json file"
        ]
      , docs_url: Package.homepage
      , notes: "Happy Blahing!"
      , process: true
    }, [
        initOpt
      , readmeOpt
      , gitignoreOpt
      , licenseOpt
      , contributingOpt
      , docsOpt
      , bumpOpt
    ])
  ;

if (parser.args.length === 2) {
    return console.log(parser.displayHelp());
}

/*!
 * log
 *
 * @name log
 * @function
 * @param {Error} err The error.
 * @param {String} data The info message.
 * @return {undefined}
 */
function log(err, data) {
    if (Typpy(err) === "array") {
        return err.forEach(function (c) {
            log(c);
        });
    }
    if (err) { return Logger.log(err.message || err, "error"); }
    if (!data) { return; }
    Logger.log(data, "info");
}

var blh = new Blah(process.cwd());

// Initialize blah
if (initOpt.is_provided) {
    return blh.init(function (err) {
        log(err, "Initialized blah in " + blh.path + "/.blah/");
    });
}

// Create the readme file
if (readmeOpt.is_provided) {
    blh.readme(function (err) {
        log(err, "Generated README.md");
    });
}

// Create the license file
if (licenseOpt.is_provided) {
    blh.license(licenseOpt.value, function (err) {
        log(err, "Generated the LICENSE file.");
    });
}

// Create the .gitignore file
if (gitignoreOpt.is_provided) {
    blh.gitignore(function (err) {
        log(err, "Generated the .gitignore file.");
    });
}

// Generate documentation
if (docsOpt.is_provided) {
    blh.docs(docsOpt.value, function (err) {
        if (err) { return log(err); }
        log(null, "Generated DOCUMENTATION.md.");
    });
}

// Bump version
if (bumpOpt.is_provided) {
    blh.version(bumpOpt.value, function (err) {
        log(err, "Bumped the " + bumpOpt.value + " version.")
    });
}

// Generate CONTRIBUTING.md
if (contributingOpt.is_provided) {
    blh.contributing(function (err) {
        log(err, "Generated CONTRIBUTING.md");
    });
}
