#!/usr/bin/env node

"use strict";

const Blah = require("../lib")
    , Fs = require("fs")
    , Logger = require("bug-killer")
    , Tilda = require("tilda")
    , Package = require("../package")
    , Typpy = require("typpy")
    , rJson = require("r-json")
    , oneByOne = require("one-by-one")
    , bindy = require("bindy")
    , isThere = require("is-there")
    ;

/*!
 * log
 *
 * @name log
 * @function
 * @param {Error} err The error.
 * @param {String} data The info message.
 * @return {undefined}
 */
function log(err, data) {
    if (Typpy(err) === "array") {
        return err.forEach(c => {
            log(c);
        });
    }
    if (err) { return Logger.log(err.message || err, "error"); }
    if (!data) { return; }
    Logger.log(data, "info");
}

new Tilda(`${__dirname}/../package.json`, {
    options: [{
        opts: ["b", "bump-version"]
      , desc: "Bumps the package.json version."
      , type: String
    }, {
        opts: ["r", "readme"]
      , desc: "Creates the README.md file."
    }, {
        opts: ["g", "gitignore"]
      , desc:  "Creates the .gitignore file."
    }, {
        opts: ["l", "license"]
      , desc: "Generates a LICENSE file with copyright information."
      , name: "license"
      , type: String
    }, {
        opts: ["d", "docs"]
      , desc: "Generates the markdown documentation (DOCUMENTATION.md) for input file."
      , name: "path"
    }, {
        opts: ["c", "contributing"]
      , desc: "Generates the CONTRIBUTING.md."
    }, {
        opts: ["f", "force"]
      , desc: "When running `blah` without any arguments, force overriding existing files."
    }]

  , examples: [
        "blah --readme      # generates README.md"
      , "blah --gitignore   # generates .gitignore"
      , "blah --license mit # writes the MIT license in the LICENSE file"
      , "blah --docs index.js # generates DOCUMENTATION.md from index.js, parsing JSDoc comments"
      , "blah --bump-version major # bumps the major field of version, in package.json file"
    ]
  , notes: "Happy Blahing!"
}).action({
    name: "init"
  , desc: "Inits the .blah directory."
}).on("init", a => {
    let blh = new Blah();
    return blh.init(err => log(err, `Initialized blah in ${blh.path}/.blah/`));
}).main(a => {
    let blh = new Blah();
    if (process.argv.length === 2 || a.options.force.is_provided) {
        return rJson("package.json", (err, pack) => {
            if (err) { return log(err); }
            let filesToGenerate = [
                {
                    file: ".gitignore"
                  , handler: cb => blh.gitignore(cb)
                }
              , {
                    file: "CONTRIBUTING.md"
                  , handler: cb => blh.contributing(cb)
                }
              , {
                    file: "LICENSE"
                  , handler: cb => blh.license(pack.license, cb)
                }
              , {
                    file: "DOCUMENTATION.md"
                  , handler: cb => blh.docs(pack.main, cb)
                }
              , {
                    file: "README.md"
                  , handler: cb => blh.readme(cb)
                }
            ];

            oneByOne(bindy(filesToGenerate, (c, next) => {
                let force = a.options.force.is_provided
                  , exists = isThere(c.file)
                  ;

                if (force || !exists) {
                    if (force && exists)  {
                        Logger.log(`Overriding ${c.file}`);
                    }
                    c.handler(err => {
                        log(err, `Generated ${c.file}.`)
                        next();
                    })
                } else {
                    log(`Avoiding to override existing file: ${c.file}.`, "warn");
                    next();
                }
            }));
        });
    }

    // Create the readme file
    if (a.options.readme.is_provided) {
        blh.readme(err => log(err, "Generated README.md"));
    }

    // Create the license file
    if (a.options.license.is_provided) {
        blh.license(a.options.license.value, err => log(err, "Generated the LICENSE file."));
    }

    // Create the .gitignore file
    if (a.options.gitignore.is_provided) {
        blh.gitignore(err => log(err, "Generated the .gitignore file."));
    }

    // Generate documentation
    if (a.options.docs.is_provided) {
        blh.docs(a.options.docs.value, err => log(err, "Generated DOCUMENTATION.md."));
    }

    // Bump version
    if (a.options.b.is_provided) {
        blh.version(a.options.b.value, err => log(err, `Bumped the ${a.options.b.value} version.`));
    }

    // Generate CONTRIBUTING.md
    if (a.options.contributing.is_provided) {
        blh.contributing(err => log(err, "Generated CONTRIBUTING.md"));
    }
});
